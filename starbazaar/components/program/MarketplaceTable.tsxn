// components/program/MarketplaceTable.tsx
import React, { useState } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Text,
  Badge,
  VStack,
  HStack,
  Flex,
  Select,
  Input,
  Spacer,
  Button,
  ButtonGroup
} from '@chakra-ui/react';

const colorMap: Record<string, { bg: string; text: string; border: string }> = {
  'The Architect': { bg: '#f1f5f9', text: '#0f172a', border: '#cbd5e1' },
  'The Innovator': { bg: '#fdf4ff', text: '#701a75', border: '#f0abfc' },
  'The Analyst': { bg: '#ecfdf5', text: '#065f46', border: '#34d399' },
  'The Connector': { bg: '#f0f9ff', text: '#0369a1', border: '#7dd3fc' },
  'The Craftsman': { bg: '#fffbeb', text: '#92400e', border: '#fcd34d' },
  'The Strategist': { bg: '#eef2ff', text: '#3730a3', border: '#c7d2fe' },
  'The Guardian': { bg: '#f5f5f5', text: '#3f3f46', border: '#d4d4d8' },
  'The Catalyst': { bg: '#fff1f2', text: '#be123c', border: '#fda4af' },
};

const influenceColorMap: Record<string, string> = {
  Visionary: 'purple',
  Pragmatist: 'orange',
  Empath: 'pink',
  Scholar: 'blue',
  Artisan: 'yellow'
};

type Candidate = {
  id: string;
  name: string;
  blindId: string;
  primaryView: keyof typeof colorMap;
  secondaryInfluences: (keyof typeof influenceColorMap)[];
  matchScore: number;
  intent: 'high' | 'medium' | 'low';
  skills: string[];
  lastActivity: string;
  isRevealed: boolean;
};

const sampleCandidates: Candidate[] = [
  {
    id: '1',
    name: 'Jasmine Rivera',
    blindId: 'NEXT-001',
    primaryView: 'The Innovator',
    secondaryInfluences: ['Visionary', 'Artisan'],
    matchScore: 92,
    intent: 'high',
    skills: ['AI/ML', 'Prompt Engineering'],
    lastActivity: '2d ago',
    isRevealed: true
  },
  {
    id: '2',
    name: 'Logan Chen',
    blindId: 'NEXT-002',
    primaryView: 'The Analyst',
    secondaryInfluences: ['Scholar', 'Pragmatist'],
    matchScore: 88,
    intent: 'medium',
    skills: ['Data Viz', 'SQL', 'Python'],
    lastActivity: '4d ago',
    isRevealed: false
  }
];

const MiniStarsignBadge = ({ color }: { color: string }) => (
  <Box
    width="30px"
    height="30px"
    borderRadius="full"
    bg={color}
    borderWidth="2px"
    borderColor="white"
    boxShadow="sm"
  />
);

const MarketplaceTable = () => {
  const [selectedPrimary, setSelectedPrimary] = useState('');
  const [selectedIntent, setSelectedIntent] = useState('');
  const [skillSearch, setSkillSearch] = useState('');
  const [viewMode, setViewMode] = useState<'table' | 'card'>('table');

  const filtered = sampleCandidates.filter(c => {
    const matchesPrimary = selectedPrimary ? c.primaryView === selectedPrimary : true;
    const matchesIntent = selectedIntent ? c.intent === selectedIntent : true;
    const matchesSkills = skillSearch
      ? c.skills.some(skill => skill.toLowerCase().includes(skillSearch.toLowerCase()))
      : true;
    return matchesPrimary && matchesIntent && matchesSkills;
  });

  return (
    <Box>
      {/* Filter Bar */}
      <Flex gap={4} mb={6} align="center" wrap="wrap" bg="white" p={4} borderRadius="lg" boxShadow="sm">
        <Select placeholder="Filter by Starsyn" width="200px" onChange={e => setSelectedPrimary(e.target.value)}>
          {Object.keys(colorMap).map((type, idx) => (
            <option key={idx} value={type}>{type}</option>
          ))}
        </Select>

        <Select placeholder="Filter by Intent" width="160px" onChange={e => setSelectedIntent(e.target.value)}>
          <option value="high">High</option>
          <option value="medium">Medium</option>
          <option value="low">Low</option>
        </Select>

        <Input placeholder="Search skills..." width="200px" value={skillSearch} onChange={e => setSkillSearch(e.target.value)} />
        <Spacer />
        <ButtonGroup size="sm" isAttached variant="outline">
          <Button onClick={() => setViewMode('table')} isActive={viewMode === 'table'}>Table</Button>
          <Button onClick={() => setViewMode('card')} isActive={viewMode === 'card'}>Card</Button>
        </ButtonGroup>
      </Flex>

      {viewMode === 'table' ? (
        filtered.map(candidate => {
          const colors = colorMap[candidate.primaryView];
          return (
            <Box
              key={candidate.id}
              mb={6}
              borderWidth="1px"
              borderRadius="lg"
              borderColor={colors.border}
              bg="white"
              boxShadow="xs"
            >
              <Box bg={colors.bg} px={4} py={2} borderTopRadius="lg">
                <Flex justify="space-between" align="center">
                  <Text color={colors.text} fontWeight="bold">
                    {candidate.primaryView}
                  </Text>
                  <HStack spacing={2}>
                    {candidate.secondaryInfluences.map((inf, idx) => (
                      <Badge key={idx} colorScheme={influ
